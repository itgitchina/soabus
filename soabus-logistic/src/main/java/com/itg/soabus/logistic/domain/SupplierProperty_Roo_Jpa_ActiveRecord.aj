// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.itg.soabus.logistic.domain;

import com.itg.soabus.logistic.domain.SupplierProperty;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SupplierProperty_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager SupplierProperty.entityManager;
    
    public static final EntityManager SupplierProperty.entityManager() {
        EntityManager em = new SupplierProperty().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SupplierProperty.countSupplierPropertys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SupplierProperty o", Long.class).getSingleResult();
    }
    
    public static List<SupplierProperty> SupplierProperty.findAllSupplierPropertys() {
        return entityManager().createQuery("SELECT o FROM SupplierProperty o", SupplierProperty.class).getResultList();
    }
    
    public static SupplierProperty SupplierProperty.findSupplierProperty(Long id) {
        if (id == null) return null;
        return entityManager().find(SupplierProperty.class, id);
    }
    
    public static List<SupplierProperty> SupplierProperty.findSupplierPropertyEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SupplierProperty o", SupplierProperty.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void SupplierProperty.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SupplierProperty.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SupplierProperty attached = SupplierProperty.findSupplierProperty(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SupplierProperty.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SupplierProperty.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SupplierProperty SupplierProperty.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SupplierProperty merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
